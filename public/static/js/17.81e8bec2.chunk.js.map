{"version":3,"sources":["routes/Admin/Order/service/index.js","routes/Admin/Order/model/index.js","utils/pageHelper/index.js"],"names":["getList_ORDER","payload","a","axios","get","params","PageHelper","requestFormat","data","responseFormat","save_ORDER","post","message","config","notice","success","update_ORDER","put","id","delete_ORDER","index","length","delete","patch_ORDER","patch","url","modelEnhance","namespace","state","pageData","create","subscriptions","setup","dispatch","history","listen","pathname","search","setTimeout","URLToArray","type","effects","init","select","order","setPage","getPageInfo","call","save","values","remove","records","map","item","reducers","pageInfo","pageHelper","resp","_request","_pairs","substring","indexOf","split","i","_pair","decodeURIComponent","PageInfo"],"mappings":"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","file":"static/js/17.81e8bec2.chunk.js","sourcesContent":["import axios from 'axios';\nimport PageHelper from '@/utils/pageHelper';\n\nimport config from '@/config';\n\nexport const getList_ORDER = async (payload) => {\n  const { data } = await axios.get('/order', {params: PageHelper.requestFormat(payload)});\n  return PageHelper.responseFormat(data);\n}\nexport const save_ORDER = async (payload) => {\n  const { data } = await axios.post('/order', payload);\n  if (data.message) config.notice.success(data.message);\n  return data;\n}\nexport const update_ORDER = async (payload) => {\n  const { data } = await axios.put('/order/' + payload.id, payload);\n  if (data.message) config.notice.success(data.message);\n  return data;\n}\nexport const delete_ORDER = async (payload) => {\n  for (let index = 0; index < payload.length; index++) {\n    const id = payload[index];\n    const {data} = await axios.delete('/order/' + id);\n    if (data.message) config.notice.success(data.message);\n  }\n  return null;\n}\nexport const patch_ORDER = async (payload) => {\n  for (let index = 0; index < payload.length; index++) {\n    const {data} = await axios.patch('/order/' + payload[index].id, payload[index]);\n    if (data.message) config.notice.success(data.message);\n  }\n  return null;\n}\n","import modelEnhance from '@/utils/modelEnhance';\nimport PageHelper from '@/utils/pageHelper';\n\nimport {\n  getList_ORDER,\n  save_ORDER,\n  update_ORDER,\n  delete_ORDER,\n  patch_ORDER,\n} from \"../service\"\n\n/**\n* true when the page is first loaded\n* Can use this value to prevent switching pages when\n* Initialize data multiple times\n*/\nlet url = true;\nexport default modelEnhance({\n  namespace: 'order',\n\n  state: {\n    pageData: PageHelper.create(),\n  },\n\n  subscriptions: {\n    setup({ dispatch, history }) {\n      history.listen(({ pathname, search }) => {\n        if (pathname === '/order' && !!search && url) {\n          url = false\n          setTimeout(() => url = true, 500);\n          const payload = PageHelper.URLToArray(search);\n          dispatch({ type: 'init', payload });\n        }\n      });\n    }\n  },\n\n  effects: {\n    // Enter page load\n    *init({ payload }, { put, select }) {\n      const { pageData } = yield select(state => state.order);\n      yield put({\n        type: 'getPageInfo',\n        payload: {\n          pageData: pageData.setPage(payload)\n        }\n      });\n    },\n    // Get paging data\n    *getPageInfo({ payload }, { call }) {\n      const { pageData } = payload;\n      const data = yield call (getList_ORDER, pageData)\n      pageData.setPage(data);\n    },\n    // Save after querying paging\n    *save({ payload }, { put, select, call }) {\n      const { values, success } = payload;\n      const { pageData } = yield select(state => state.order);\n\n      if (values.id) yield call(update_ORDER, values);\n      else yield call(save_ORDER, values);\n\n      yield put({ type: 'getPageInfo', payload: { pageData } });\n      success();\n    },\n    // Delete after querying paging\n    *remove({ payload }, { put, select, call }) {\n      const { records, success } = payload;\n      const { pageData } = yield select(state => state.order);\n      const data = records.map(item => item.id)\n      yield call(delete_ORDER, data);\n      yield put({ type: 'getPageInfo', payload: { pageData } });\n      success();\n    },\n    *patch({ payload }, { select, call, put }) {\n      const { records } = payload;\n      const { pageData } = yield select(state => state.order);\n      yield call(patch_ORDER, records);\n      yield put({ type: 'getPageInfo', payload: { pageData } });\n    },\n  },\n\n  reducers: {\n    success(state, { payload }) {\n      return {\n        ...state,\n        ...payload,\n      };\n    },\n  }\n});\n","import PageInfo from './PageInfo';\nimport config from '@/config';\n\n/**\n * Universal paging assistant\n */\nexport default classã€€PageHelper {\n  static create = () => {\n    const pageInfo = new PageInfo();\n    return pageInfo;\n  }\n\n  /**\n   * You can format the parameters sent to the backend by setting this function\n   * \n   * For example, the parameters required by the back-end paging interface are\n   * {\n   *    currentPage: 1, \n   *    showCount: 10, \n   *    paramMap: {name: 'jonn'}\n   * }\n   * The paging information can be formatted by setting this parameter\n   * E.g:\n   * pageHelper.requestFormat(({pageNum, pageSize}) => ({\n   *  currentPage: pageNum,\n   *  showCount: pageSize\n   * }))\n  */\n  static requestFormat(pageInfo) {\n    return config.pageHelper.requestFormat(pageInfo);\n  };\n   \n\n  /**\n   * Format the data returned from the server and place it in the PageInfo object,\n   * Prepare for the next: page\n   * Page number: pageNum;\n     Quantity per page: pageSize;\n     Current page number: size;\n     Total: total;\n     Yotal pages: totalPages;\n     Result set: list;\n   * @param {object} resp \n  */\n  static responseFormat(resp) {\n    return config.pageHelper.responseFormat(resp);\n  }\n\n  static URLToArray(url) {\n    const _request = {};\n    const _pairs = url.substring(url.indexOf('?') + 1).split('&');\n    for (var i = 0; i < _pairs.length; i++) {\n        if(!_pairs[i])\n            continue;\n        var _pair = _pairs[i].split('=');\n        _request[decodeURIComponent(_pair[0])] = decodeURIComponent(_pair[1]);\n    }\n    return _request;\n  }\n}"],"sourceRoot":""}