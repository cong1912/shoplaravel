{"version":3,"sources":["routes/Auth/Register/messages/index.js","routes/Auth/Register/components/Success.js","routes/Auth/Register/components/index.js"],"names":["scope","titleSignUp","id","defaultMessage","email","messageEmail","messageEmailFormat","checkPassword","placeholderPassword","enterPassword","passwordsTwice","confirmPassword","enterPhone","placeholderPhone","enterCode","placeholderCode","getCode","cancel","signUp","LoginNow","viewMailbox","backToHome","registrationSuccess","textRegister","Content","Layout","actions","type","intl","formatMessage","messages","href","footer","extra","className","title","Component","Link","router","FormItem","Form","Item","Option","Select","InputGroup","Input","Group","Title","Typography","passwordStatusMap","ok","style","color","pass","poor","passwordProgressMap","Register","connect","register","submitting","loading","effects","props","onGetCaptcha","count","setState","interval","setInterval","clearInterval","getPasswordStatus","form","refs","value","getFieldValue","length","handleSubmit","values","dispatch","visible","payload","handleConfirmBlur","e","target","confirmDirty","state","checkConfirm","Promise","reject","resolve","validateFields","force","renderPasswordProgress","passwordStatus","status","strokeWidth","percent","showInfo","registerSuccess","this","onFinish","scrollToFirstError","ref","name","initialValues","prefix","src","logoImg","alt","level","rules","required","message","validateTrigger","placeholder","overlayClassName","content","padding","marginTop","overlayStyle","width","placement","validator","rule","hasFeedback","Password","onChange","onBlur","onFocus","compact","addonBefore","noStyle","gutter","span","disabled","onClick","valuePropName","_","align","size","htmlType","to","routerLinks","nextProps","prevState"],"mappings":"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","file":"static/js/12.c58d279b.chunk.js","sourcesContent":["export const scope = 'routes.Register';\n\nexport default ({\n  titleSignUp: {\n    id: `${scope}.titleSignUp`,\n    defaultMessage: 'Sign Up To Admin Panel',\n  },\n  email: {\n    id: `${scope}.email`,\n    defaultMessage: 'Email',\n  },\n  messageEmail: {\n    id: `${scope}.messageEmail`,\n    defaultMessage: 'Please enter your email address.',\n  },\n  messageEmailFormat: {\n    id: `${scope}.messageEmailFormat`,\n    defaultMessage: 'Incorrect email address format.',\n  },\n  checkPassword: {\n    id: `${scope}.checkPassword`,\n    defaultMessage: 'Please enter at least 6 characters. Please do not use passwords that are easy to guess.',\n  },\n\n  placeholderPassword: {\n    id: `${scope}.placeholderPassword`,\n    defaultMessage: 'At least 6 passwords, case sensitive',\n  },\n  enterPassword: {\n    id: `${scope}.enterPassword`,\n    defaultMessage: 'Please confirm your password!',\n  },\n  passwordsTwice: {\n    id: `${scope}.passwordsTwice`,\n    defaultMessage: 'The passwords entered twice do not match!',\n  },\n  confirmPassword: {\n    id: `${scope}.confirmPassword`,\n    defaultMessage: 'Confirm Password',\n  },\n  enterPhone: {\n    id: `${scope}.enterPhone`,\n    defaultMessage: 'Please enter phone number!',\n  },\n  placeholderPhone: {\n    id: `${scope}.placeholderPhone`,\n    defaultMessage: '11-digit mobile phone number',\n  },\n  enterCode: {\n    id: `${scope}.enterCode`,\n    defaultMessage: 'Please enter verification code!',\n  },\n  placeholderCode: {\n    id: `${scope}.placeholderCode`,\n    defaultMessage: 'Verification code',\n  },\n  getCode: {\n    id: `${scope}.getCode`,\n    defaultMessage: 'Get code',\n  },\n  cancel: {\n    id: `${scope}.cancel`,\n    defaultMessage: 'Cancel',\n  },\n\n  signUp: {\n    id: `${scope}.signUp`,\n    defaultMessage: 'Sign Up',\n  },\n  LoginNow: {\n    id: `${scope}.LoginNow`,\n    defaultMessage: 'Sign in with an existing account',\n  },\n  viewMailbox: {\n    id: `${scope}.viewMailbox`,\n    defaultMessage: 'View mailbox',\n  },\n  backToHome: {\n    id: `${scope}.backToHome`,\n    defaultMessage: 'Back to home',\n  },\n  registrationSuccess: {\n    id: `${scope}.registrationSuccess`,\n    defaultMessage: 'Registration Success',\n  },\n  textRegister: {\n    id: `${scope}.textRegister`,\n    defaultMessage: 'The activation email has been sent to your email address and is valid for 24 hours. Please log in to the email in time and click on the link in the email to activate the account.',\n  },\n});\n","import React, { Component, Fragment } from 'react';\nimport intl from 'react-intl-universal';\nimport { Layout, Button } from 'antd';\n\nimport { Result } from 'components/Pages';\nimport messages from '../messages';\nconst { Content } = Layout;\n\nexport default class extends Component {\n  render() {\n    const actions = (\n      <Fragment>\n        <Button type=\"primary\">{intl.formatMessage(messages.viewMailbox)}</Button>\n        <Button href=\"/\">{intl.formatMessage(messages.backToHome)}</Button>\n      </Fragment>\n    );\n\n    const footer = (\n      <Fragment>\n        <p>\n          <span>Need More Help?</span>\n        </p>\n        <p>\n          Misc question two? <span>Response Link</span>\n        </p>\n      </Fragment>\n    );\n\n    const extra = <div>Yoursite.com</div>;\n    \n    return (\n      <Layout className=\"full-layout result-page\">\n        <Content>\n          <Result\n            title={intl.formatMessage(messages.registrationSuccess)}\n            type=\"success\"\n            actions={actions}\n            footer={footer}\n            extra={extra}\n          >\n            {intl.formatMessage(messages.textRegister)}\n          </Result>\n        </Content>\n      </Layout>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { connect, router } from 'dva';\nimport { Input, Button, Select, Row, Col, Popover, Progress, Layout, Form, Typography, Checkbox } from 'antd';\nimport intl from 'react-intl-universal';\n\nimport routerLinks from \"@/utils/routerLinks\";\nimport Success from './Success';\nimport messages from '../messages';\n\nimport logoImg from 'assets/images/logo1.png';\nimport './index.less';\nimport '../../Login/components/index.less';\n\nconst { Link } = router;\nconst { Content } = Layout;\n\nconst FormItem = Form.Item;\nconst { Option } = Select;\nconst InputGroup = Input.Group;\nconst { Title } = Typography;\n\nconst passwordStatusMap = {\n  ok: <div style={{ color: '#52c41a' }}>Strength: Strong</div>,\n  pass: <div style={{ color: '#faad14' }}>Strength: Medium</div>,\n  poor: <div style={{ color: '#f5222d' }}>Strength: Too Short</div>\n};\n\nconst passwordProgressMap = {\n  ok: 'success',\n  pass: 'normal',\n  poor: 'exception'\n};\n\n@connect(({ register, loading }) => ({\n  register,\n  submitting: loading.effects['register/submit']\n}))\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      confirmDirty: false,\n      visible: false,\n      registerSuccess: false\n    };\n  }\n\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.register.status) {\n      return {\n        registerSuccess: true\n      };\n    }\n    return null;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  onGetCaptcha = () => {\n    let count = 59;\n    this.setState({ count });\n    this.interval = setInterval(() => {\n      count -= 1;\n      this.setState({ count });\n      if (count === 0) {\n        clearInterval(this.interval);\n      }\n    }, 1000);\n  };\n\n  getPasswordStatus = () => {\n    const { form } = this.refs;\n    if (form) {\n      const value = form.getFieldValue('password');\n      if (value && value.length > 9) {\n        return 'ok';\n      }\n      if (value && value.length > 5) {\n        return 'pass';\n      }\n    }\n    return 'poor';\n  };\n\n  handleSubmit = values => {\n    const { dispatch } = this.props;\n    this.setState({\n      visible: false\n    });\n    dispatch({\n      type: 'register/submit',\n      payload: {\n        ...values,\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    const { confirmDirty } = this.state;\n    this.setState({ confirmDirty: confirmDirty || !!value });\n  };\n\n  checkConfirm = (value, getFieldValue) => {\n    if (value && value !== getFieldValue('password')) {\n      return Promise.reject(intl.formatMessage(messages.passwordsTwice));\n    } else {\n      return Promise.resolve();\n    }\n  };\n\n  checkPassword = (value, validateFields) => {\n    if (!value) {\n      this.setState({\n        visible: !!value\n      });\n      return Promise.reject(intl.formatMessage(messages.enterPassword));\n    } else {\n      const { visible, confirmDirty } = this.state;\n      if (!visible) {\n        this.setState({\n          visible: !!value\n        });\n      }\n      if (value.length < 6) {\n        return Promise.reject(intl.formatMessage(messages.placeholderPassword));\n      } else {\n        if (value && confirmDirty) {\n          validateFields(['confirm'], { force: true });\n        }\n      }\n    }\n    return Promise.resolve();\n  };\n\n  renderPasswordProgress = () => {\n    const { form } = this.refs;\n    const passwordStatus = this.getPasswordStatus();\n    if (form) {\n      const value = form.getFieldValue('password');\n      return (value && value.length) ? (\n        <Progress\n          status={passwordProgressMap[passwordStatus]}\n          className={`progress-${passwordStatus}`}\n          strokeWidth={6}\n          percent={value.length * 10 > 100 ? 100 : value.length * 10}\n          showInfo={false}\n        />\n      ) : null;\n    }\n    return null;\n  };\n\n  render() {\n    const { submitting } = this.props;\n    const { count, visible, registerSuccess } = this.state;\n\n    if (registerSuccess) {\n      return <Success />;\n    }\n    return (\n      <Layout className=\"full-layout register-page login-page\">\n        <Content>\n          <Form\n            onFinish={this.handleSubmit}\n            scrollToFirstError\n            ref=\"form\"\n            name=\"basic\"\n            className=\"login-form\"\n            initialValues={{prefix: \"86\"}}\n          >\n            <div className=\"user-img\">\n              <img src={logoImg} alt=\"logo\" />\n            </div>\n            <Title level={4} className=\"text-center\">{intl.formatMessage(messages.titleSignUp)}</Title>\n            <FormItem\n              name=\"mail\"\n              rules={[\n                {required: true, message: intl.formatMessage(messages.messageEmail)},\n                {type: 'email',message: intl.formatMessage(messages.messageEmailFormat)}\n              ]}\n              validateTrigger={['onChange', 'onBlur']}\n            >\n              <Input placeholder={intl.formatMessage(messages.email)} />\n            </FormItem>\n            <Popover\n              overlayClassName=\"popover-register-page\"\n                content={\n                  <div style={{ padding: '4px 0' }}>\n                    {passwordStatusMap[this.getPasswordStatus()]}\n                    {this.renderPasswordProgress()}\n                    <div style={{ marginTop: 10 }}>\n                      {intl.formatMessage(messages.checkPassword)}\n                    </div>\n                  </div>\n                }\n                overlayStyle={{ width: 240 }}\n                placement=\"right\"\n                visible={visible}\n              >\n\n                <FormItem\n                  name=\"password\"\n                  rules={[\n                    ({ validateFields }) => {\n                      const { checkPassword } = this;\n                      return { validator(rule, value) {\n                        return checkPassword(value, validateFields);\n                      }}\n                    }\n                  ]}\n                  validateTrigger={['onChange', 'onBlur']}\n                  hasFeedback\n                >\n                  <Input.Password \n                    type=\"password\"\n                    placeholder={intl.formatMessage(messages.placeholderPassword)}\n                    onChange={() => this.setState({visible: true})}\n                    onBlur={() => this.setState({visible: false})}\n                    onFocus={() => this.setState({visible: true})}\n                  />\n                </FormItem>\n              </Popover>\n\n            <FormItem\n              name=\"confirm\"\n              rules={[\n                { required: true, message: intl.formatMessage(messages.enterPassword) },\n                ({ getFieldValue }) => {\n                  return { validator(rule, value) {\n                    if (value && value !== getFieldValue('password')) {\n                      return Promise.reject(intl.formatMessage(messages.passwordsTwice));\n                    }\n                    return Promise.resolve();\n                  }}\n                }\n              ]}\n              validateTrigger={['onChange', 'onBlur']}\n              hasFeedback\n            >\n              <Input.Password \n                type=\"password\"\n                placeholder={intl.formatMessage(messages.confirmPassword)}\n                onBlur={this.handleConfirmBlur}\n              />\n            </FormItem>\n            <InputGroup compact>\n              <FormItem\n                name=\"mobile\"\n                rules={[{ required: true, message: intl.formatMessage(messages.enterPhone) }]}\n                style={{ width: '100%' }}\n                validateTrigger={['onChange', 'onBlur']}\n              >\n                <Input addonBefore={(\n                  <Form.Item name=\"prefix\" noStyle>\n                    <Select>\n                      <Option value=\"86\">+86</Option>\n                      <Option value=\"87\">+87</Option>\n                    </Select>\n                  </Form.Item>\n                )} placeholder={intl.formatMessage(messages.placeholderPhone)} />\n              </FormItem>\n            </InputGroup>\n            <FormItem\n              name=\"captcha\"\n              rules={[{ required: true, message: intl.formatMessage(messages.enterCode) }]}\n              validateTrigger={['onChange', 'onBlur']}\n            >\n              <Row gutter={8}>\n                <Col span={16}>\n                  <Input placeholder={intl.formatMessage(messages.placeholderCode)} />\n                </Col>\n                <Col span={8}>\n                  <Button className=\"getCaptcha\" disabled={count} onClick={this.onGetCaptcha}>\n                    {count ? `${count} s` : intl.formatMessage(messages.getCode)}\n                  </Button>\n                </Col>\n              </Row>\n            </FormItem>\n            <Form.Item\n              name=\"agreement\"\n              valuePropName=\"checked\"\n              rules={[\n                { validator:(_, value) => value ? Promise.resolve() : Promise.reject('Should accept agreement') },\n              ]}\n              validateTrigger={['onChange', 'onBlur']}\n            >\n              <Checkbox>\n                I have read the agreement\n              </Checkbox>\n            </Form.Item>\n            <Row align=\"center\" className=\"mb-2\">\n              <Button\n                loading={submitting}\n                size=\"large\"\n                type=\"primary\"\n                htmlType=\"submit\"\n                className=\"register-form-button\"\n              >\n                {intl.formatMessage(messages.signUp)}\n              </Button>\n            </Row>\n            <Row align=\"center\">\n              <Link to={routerLinks(\"Login\")}>\n                {intl.formatMessage(messages.LoginNow)}\n              </Link>\n            </Row>\n          </Form>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nexport default Register;"],"sourceRoot":""}