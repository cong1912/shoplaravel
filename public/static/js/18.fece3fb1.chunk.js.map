{"version":3,"sources":["routes/Auth/Login/model/index.js"],"names":["namespace","state","loggedIn","message","user","subscriptions","setup","history","dispatch","listen","pathname","indexOf","routerLinks","$$","removeStore","checkAuth","effects","login","payload","call","put","login_User","status","data","axios","defaults","headers","common","token","remember","setStore","routerRedux","replace","type","console","log","logout","_","reducers","loginSuccess","loginError"],"mappings":"kOAQe,WACbA,UAAW,QAEXC,MAAO,CACLC,UAAU,EACVC,QAAS,GACTC,KAAM,IAGRC,cAAe,CACbC,MADa,YACiB,IAAtBC,EAAqB,EAArBA,QAAqB,EAAZC,SACf,OAAOD,EAAQE,QAAO,aAC4B,IADV,EAAfC,SACVC,QAAQC,YAAY,YAC/BC,IAAGC,YAAY,QACfC,YAAU,KAAM,MAAM,SAM9BC,QAAS,CACNC,MADM,6GAG+B,OAF7BC,EADF,EACEA,QAAaC,EADf,EACeA,KAAMC,EADrB,EACqBA,IADrB,kBAGqCD,EAAKE,IAAYH,GAHtD,mBAGKI,EAHL,EAGKA,OAAQnB,EAHb,EAGaA,QAASoB,EAHtB,EAGsBA,KACV,YAAXD,EAJD,iBAQD,OAHAE,IAAMC,SAASC,QAAQC,OAAvB,cAAiDJ,EAAKK,MACtDL,EAAKM,SAAWX,EAAQW,SACxBhB,IAAGiB,SAAS,OAAQP,GAPnB,UAQKH,EAAIW,IAAYC,QAAQ,MAR7B,gCAUD,OAVC,UAUKZ,EAAI,CACRa,KAAM,aACNf,QAAS,CAAEf,aAZZ,gCAiBH,OAjBG,0BAgBH+B,QAAQC,IAAR,MAhBG,UAiBGf,EAAI,CACRa,KAAM,eAlBL,yDAsBNG,OAtBM,qBAsBCC,EAtBD,sEAsBMjB,IAtBN,2CAyBTkB,SAAU,CACRC,aADQ,SACKtC,EADL,GAC0B,IAAZiB,EAAW,EAAXA,QACpB,OAAO,2BACFjB,GADL,IAEEC,UAAU,EACVC,QAAS,GACTC,KAAMc,KAGVsB,WATQ,SASGvC,EATH,GASwB,IAAZiB,EAAW,EAAXA,QAClB,OAAO,2BACFjB,GADL,IAEEC,UAAU,EACVC,QAASe,EAAQf","file":"static/js/18.fece3fb1.chunk.js","sourcesContent":["import { routerRedux } from 'dva';\nimport $$ from 'cmn-utils';\nimport axios from 'axios';\n\nimport routerLinks from \"@/utils/routerLinks\";\nimport checkAuth from \"@/utils/checkAuth\";\nimport { login_User } from '../service';\n\nexport default {\n  namespace: 'login',\n\n  state: {\n    loggedIn: false,\n    message: '',\n    user: {}\n  },\n\n  subscriptions: {\n    setup({ history, dispatch }) {\n      return history.listen(({ pathname }) => {\n        if (pathname.indexOf(routerLinks(\"Login\")) !== -1) {\n          $$.removeStore('user');\n          checkAuth(null, null, true)\n        }\n      });\n    }\n  },\n\n  effects: {\n    *login({ payload }, { call, put }) {\n      try {\n        const { status, message, data } = yield call(login_User, payload);\n        if (status === \"success\") {\n          axios.defaults.headers.common['Authorization'] = data.token\n          data.remember = payload.remember;\n          $$.setStore('user', data);\n          yield put(routerRedux.replace('/'));\n        } else {\n          yield put({\n            type: 'loginError',\n            payload: { message }\n          });\n        }\n      } catch (e) {\n        console.log(e)\n        yield put({\n          type: 'loginError'\n        });\n      }\n    },\n    *logout(_, { put }) {}\n  },\n\n  reducers: {\n    loginSuccess(state, { payload }) {\n      return {\n        ...state,\n        loggedIn: true,\n        message: '',\n        user: payload\n      };\n    },\n    loginError(state, { payload }) {\n      return {\n        ...state,\n        loggedIn: false,\n        message: payload.message\n      };\n    }\n  }\n};\n"],"sourceRoot":""}